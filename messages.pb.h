/* Automatically generated nanopb header */
/* Generated by nanopb-0.2.4 at Mon Feb 17 22:38:18 2014. */

#ifndef _PB_MESSAGES_PB_H_
#define _PB_MESSAGES_PB_H_
#include "pb.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _PiWeather_BindingAck {
    int32_t id;
    bool has_time_interval_s;
    int32_t time_interval_s;
} PiWeather_BindingAck;

typedef struct _PiWeather_SensorData {
    int32_t id;
    bool has_binding;
    bool binding;
    bool has_temperature;
    float temperature;
    bool has_battery_level;
    int32_t battery_level;
    bool has_pressure;
    float pressure;
    bool has_humidity;
    float humidity;
    bool has_type;
    int32_t type;
} PiWeather_SensorData;

/* Default values for struct fields */

/* Field tags (for use in manual encoding/decoding) */
#define PiWeather_BindingAck_id_tag              1
#define PiWeather_BindingAck_time_interval_s_tag 2
#define PiWeather_SensorData_id_tag              1
#define PiWeather_SensorData_binding_tag         2
#define PiWeather_SensorData_temperature_tag     3
#define PiWeather_SensorData_battery_level_tag   4
#define PiWeather_SensorData_pressure_tag        5
#define PiWeather_SensorData_humidity_tag        6
#define PiWeather_SensorData_type_tag            7

/* Struct field encoding specification for nanopb */
extern const pb_field_t PiWeather_SensorData_fields[8];
extern const pb_field_t PiWeather_BindingAck_fields[3];

/* Maximum encoded size of messages (where known) */
#define PiWeather_SensorData_size                35
#define PiWeather_BindingAck_size                12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
